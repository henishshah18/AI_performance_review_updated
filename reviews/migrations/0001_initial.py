# Generated by Django 4.2 on 2025-06-15 16:52

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("okr", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ReviewCycle",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the review cycle (e.g., 'Q4 2024 Performance Review')",
                        max_length=255,
                    ),
                ),
                (
                    "review_type",
                    models.CharField(
                        choices=[
                            ("quarterly", "Quarterly"),
                            ("half_yearly", "Half Yearly"),
                            ("annual", "Annual"),
                        ],
                        help_text="Type of review cycle",
                        max_length=20,
                    ),
                ),
                (
                    "review_period_start",
                    models.DateField(
                        help_text="Start date of the performance period being reviewed"
                    ),
                ),
                (
                    "review_period_end",
                    models.DateField(
                        help_text="End date of the performance period being reviewed"
                    ),
                ),
                (
                    "self_assessment_start",
                    models.DateField(
                        help_text="When employees can start their self-assessments"
                    ),
                ),
                (
                    "self_assessment_end",
                    models.DateField(
                        help_text="Deadline for self-assessment completion"
                    ),
                ),
                (
                    "peer_review_start",
                    models.DateField(help_text="When peer reviews can begin"),
                ),
                (
                    "peer_review_end",
                    models.DateField(help_text="Deadline for peer review completion"),
                ),
                (
                    "manager_review_start",
                    models.DateField(help_text="When manager reviews can begin"),
                ),
                (
                    "manager_review_end",
                    models.DateField(
                        help_text="Deadline for manager review completion"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        help_text="Current status of the review cycle",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="HR Admin who created this review cycle",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UpwardReview",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_anonymous",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this review should be anonymous",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                (
                    "leadership_effectiveness",
                    models.IntegerField(
                        blank=True,
                        help_text="Leadership effectiveness (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "leadership_examples",
                    models.TextField(
                        blank=True,
                        help_text="Examples of effective leadership or areas for improvement",
                        null=True,
                    ),
                ),
                (
                    "communication_clarity",
                    models.IntegerField(
                        blank=True,
                        help_text="Communication clarity and frequency (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "communication_examples",
                    models.TextField(
                        blank=True,
                        help_text="Examples of communication strengths or areas for improvement",
                        null=True,
                    ),
                ),
                (
                    "support_provided",
                    models.IntegerField(
                        blank=True,
                        help_text="Support provided for growth and development (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "support_examples",
                    models.TextField(
                        blank=True,
                        help_text="Examples of support provided or needed",
                        null=True,
                    ),
                ),
                (
                    "areas_for_improvement",
                    models.TextField(
                        blank=True,
                        help_text="Areas where the manager could improve",
                        null=True,
                    ),
                ),
                (
                    "additional_comments",
                    models.TextField(
                        blank=True,
                        help_text="Additional feedback or comments",
                        null=True,
                    ),
                ),
                (
                    "sentiment_analyzed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether AI sentiment analysis has been performed",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the upward review was submitted",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="upward_reviews",
                        to="reviews.reviewcycle",
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        help_text="Manager being reviewed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="upward_reviews_received",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        help_text="Employee providing feedback on their manager",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="upward_reviews_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SelfAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                (
                    "technical_excellence",
                    models.IntegerField(
                        blank=True,
                        help_text="Technical skills and expertise (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "technical_examples",
                    models.TextField(
                        blank=True,
                        help_text="Examples of technical achievements and contributions",
                        null=True,
                    ),
                ),
                (
                    "collaboration",
                    models.IntegerField(
                        blank=True,
                        help_text="Teamwork and collaboration skills (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "collaboration_examples",
                    models.TextField(
                        blank=True,
                        help_text="Examples of collaboration and teamwork",
                        null=True,
                    ),
                ),
                (
                    "problem_solving",
                    models.IntegerField(
                        blank=True,
                        help_text="Problem-solving and analytical skills (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "problem_solving_examples",
                    models.TextField(
                        blank=True,
                        help_text="Examples of problem-solving achievements",
                        null=True,
                    ),
                ),
                (
                    "initiative",
                    models.IntegerField(
                        blank=True,
                        help_text="Initiative and proactive behavior (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "initiative_examples",
                    models.TextField(
                        blank=True,
                        help_text="Examples of taking initiative and going above and beyond",
                        null=True,
                    ),
                ),
                (
                    "development_goals",
                    models.TextField(
                        blank=True,
                        help_text="Personal development goals for the next period",
                        null=True,
                    ),
                ),
                (
                    "manager_support_needed",
                    models.TextField(
                        blank=True,
                        help_text="Support needed from manager for growth and development",
                        null=True,
                    ),
                ),
                (
                    "career_interests",
                    models.TextField(
                        blank=True,
                        help_text="Career interests and aspirations",
                        null=True,
                    ),
                ),
                (
                    "sentiment_analyzed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether AI sentiment analysis has been performed",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the self-assessment was submitted",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="self_assessments",
                        to="reviews.reviewcycle",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="self_assessments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReviewParticipant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this user is actively participating in the review",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "cycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="reviews.reviewcycle",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_participations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReviewMeeting",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "scheduled_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Scheduled date and time for the review meeting",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                (
                    "meeting_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes from the review meeting discussion",
                        null=True,
                    ),
                ),
                (
                    "action_items",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Action items and follow-ups from the meeting",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_meetings",
                        to="reviews.reviewcycle",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        help_text="Employee participating in the review meeting",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_meetings_as_employee",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        help_text="Manager conducting the review meeting",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_meetings_as_manager",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PeerReviewAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "review_cycle",
                    models.CharField(
                        help_text="Review cycle identifier", max_length=100
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("declined", "Declined"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        help_text="Due date for completing the peer review"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the peer review was completed",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Manager or HR who created this assignment",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="peer_review_assignments_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewee",
                    models.ForeignKey(
                        help_text="User to be reviewed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="peer_review_assignments_received",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        help_text="User assigned to provide the review",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="peer_review_assignments_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PeerReview",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_anonymous",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this review should be anonymous to the reviewee",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                (
                    "collaboration_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Collaboration effectiveness (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "collaboration_examples",
                    models.TextField(
                        blank=True,
                        help_text="Examples of collaboration strengths or areas for improvement",
                        null=True,
                    ),
                ),
                (
                    "impact_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Impact and contribution to team/projects (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "impact_examples",
                    models.TextField(
                        blank=True,
                        help_text="Examples of positive impact and contributions",
                        null=True,
                    ),
                ),
                (
                    "development_suggestions",
                    models.TextField(
                        blank=True,
                        help_text="Constructive suggestions for professional development",
                        null=True,
                    ),
                ),
                (
                    "strengths_to_continue",
                    models.TextField(
                        blank=True,
                        help_text="Strengths and behaviors to continue",
                        null=True,
                    ),
                ),
                (
                    "sentiment_analyzed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether AI sentiment analysis has been performed",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the peer review was submitted",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="peer_reviews",
                        to="reviews.reviewcycle",
                    ),
                ),
                (
                    "reviewee",
                    models.ForeignKey(
                        help_text="User being reviewed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="peer_reviews_received",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        help_text="User providing the peer review",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="peer_reviews_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ManagerReview",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                (
                    "overall_rating",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("exceeds_expectations", "Exceeds Expectations"),
                            ("meets_expectations", "Meets Expectations"),
                            ("below_expectations", "Below Expectations"),
                        ],
                        help_text="Overall performance rating",
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "technical_excellence",
                    models.IntegerField(
                        blank=True,
                        help_text="Technical skills and expertise (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "technical_justification",
                    models.TextField(
                        blank=True,
                        help_text="Justification for technical excellence rating",
                        null=True,
                    ),
                ),
                (
                    "collaboration",
                    models.IntegerField(
                        blank=True,
                        help_text="Collaboration and teamwork (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "collaboration_justification",
                    models.TextField(
                        blank=True,
                        help_text="Justification for collaboration rating",
                        null=True,
                    ),
                ),
                (
                    "problem_solving",
                    models.IntegerField(
                        blank=True,
                        help_text="Problem-solving abilities (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "problem_solving_justification",
                    models.TextField(
                        blank=True,
                        help_text="Justification for problem-solving rating",
                        null=True,
                    ),
                ),
                (
                    "initiative",
                    models.IntegerField(
                        blank=True,
                        help_text="Initiative and proactive behavior (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "initiative_justification",
                    models.TextField(
                        blank=True,
                        help_text="Justification for initiative rating",
                        null=True,
                    ),
                ),
                (
                    "development_plan",
                    models.TextField(
                        blank=True,
                        help_text="Development plan and growth opportunities",
                        null=True,
                    ),
                ),
                (
                    "manager_support",
                    models.TextField(
                        blank=True,
                        help_text="Support manager will provide for employee development",
                        null=True,
                    ),
                ),
                (
                    "business_impact",
                    models.TextField(
                        blank=True,
                        help_text="Assessment of business impact and contributions",
                        null=True,
                    ),
                ),
                (
                    "sentiment_analyzed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether AI sentiment analysis has been performed",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the manager review was submitted",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="manager_reviews",
                        to="reviews.reviewcycle",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        help_text="Employee being reviewed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="manager_reviews_received",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        help_text="Manager providing the review",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="manager_reviews_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GoalManagerAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "manager_rating",
                    models.CharField(
                        choices=[
                            ("exceeded", "Exceeded"),
                            ("met", "Met"),
                            ("partially_met", "Partially Met"),
                            ("not_met", "Not Met"),
                        ],
                        help_text="Manager's rating for this goal",
                        max_length=20,
                    ),
                ),
                (
                    "manager_feedback",
                    models.TextField(
                        blank=True,
                        help_text="Manager's feedback on goal achievement",
                        null=True,
                    ),
                ),
                (
                    "business_impact",
                    models.TextField(
                        blank=True,
                        help_text="Assessment of business impact from this goal",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "goal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="manager_assessments",
                        to="okr.goal",
                    ),
                ),
                (
                    "manager_review",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="goal_assessments",
                        to="reviews.managerreview",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GoalAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "self_rating",
                    models.CharField(
                        choices=[
                            ("exceeded", "Exceeded"),
                            ("met", "Met"),
                            ("partially_met", "Partially Met"),
                            ("not_met", "Not Met"),
                        ],
                        help_text="Self-assessment rating for this goal",
                        max_length=20,
                    ),
                ),
                (
                    "accomplishments",
                    models.TextField(
                        blank=True,
                        help_text="Key accomplishments and achievements for this goal",
                        null=True,
                    ),
                ),
                (
                    "evidence_links",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Links to evidence, documents, or artifacts",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "goal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="self_assessments",
                        to="okr.goal",
                    ),
                ),
                (
                    "self_assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="goal_assessments",
                        to="reviews.selfassessment",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="upwardreview",
            index=models.Index(
                fields=["cycle", "status"], name="reviews_upw_cycle_i_95cc12_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="upwardreview",
            index=models.Index(
                fields=["reviewer"], name="reviews_upw_reviewe_e0428c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="upwardreview",
            index=models.Index(
                fields=["manager"], name="reviews_upw_manager_c32e9e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="upwardreview",
            unique_together={("cycle", "reviewer", "manager")},
        ),
        migrations.AddIndex(
            model_name="selfassessment",
            index=models.Index(
                fields=["cycle", "status"], name="reviews_sel_cycle_i_5d0286_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="selfassessment",
            index=models.Index(
                fields=["user", "created_at"], name="reviews_sel_user_id_ba6f95_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="selfassessment",
            unique_together={("cycle", "user")},
        ),
        migrations.AddIndex(
            model_name="reviewparticipant",
            index=models.Index(
                fields=["cycle", "is_active"], name="reviews_rev_cycle_i_c5577c_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="reviewparticipant",
            unique_together={("cycle", "user")},
        ),
        migrations.AddIndex(
            model_name="reviewmeeting",
            index=models.Index(
                fields=["cycle", "status"], name="reviews_rev_cycle_i_8bbd0f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reviewmeeting",
            index=models.Index(
                fields=["scheduled_at"], name="reviews_rev_schedul_90dcde_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="reviewmeeting",
            unique_together={("cycle", "manager", "employee")},
        ),
        migrations.AddIndex(
            model_name="reviewcycle",
            index=models.Index(fields=["status"], name="reviews_rev_status_7227c5_idx"),
        ),
        migrations.AddIndex(
            model_name="reviewcycle",
            index=models.Index(
                fields=["review_type"], name="reviews_rev_review__5809ee_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reviewcycle",
            index=models.Index(
                fields=["created_at"], name="reviews_rev_created_4d814f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="peerreviewassignment",
            index=models.Index(
                fields=["review_cycle", "status"], name="reviews_pee_review__34b55b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="peerreviewassignment",
            index=models.Index(
                fields=["due_date"], name="reviews_pee_due_dat_b9a074_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="peerreviewassignment",
            unique_together={("reviewee", "reviewer", "review_cycle")},
        ),
        migrations.AddIndex(
            model_name="peerreview",
            index=models.Index(
                fields=["cycle", "status"], name="reviews_pee_cycle_i_d70ff1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="peerreview",
            index=models.Index(
                fields=["reviewer"], name="reviews_pee_reviewe_c2796e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="peerreview",
            index=models.Index(
                fields=["reviewee"], name="reviews_pee_reviewe_9a1d98_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="peerreview",
            unique_together={("cycle", "reviewer", "reviewee")},
        ),
        migrations.AddIndex(
            model_name="managerreview",
            index=models.Index(
                fields=["cycle", "status"], name="reviews_man_cycle_i_a2bb51_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="managerreview",
            index=models.Index(
                fields=["manager"], name="reviews_man_manager_8b27e3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="managerreview",
            index=models.Index(
                fields=["employee"], name="reviews_man_employe_2792d7_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="managerreview",
            unique_together={("cycle", "manager", "employee")},
        ),
        migrations.AddIndex(
            model_name="goalmanagerassessment",
            index=models.Index(
                fields=["manager_review"], name="reviews_goa_manager_1ef062_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="goalmanagerassessment",
            index=models.Index(fields=["goal"], name="reviews_goa_goal_id_1e00bc_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="goalmanagerassessment",
            unique_together={("manager_review", "goal")},
        ),
        migrations.AddIndex(
            model_name="goalassessment",
            index=models.Index(
                fields=["self_assessment"], name="reviews_goa_self_as_b71265_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="goalassessment",
            index=models.Index(fields=["goal"], name="reviews_goa_goal_id_223ddc_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="goalassessment",
            unique_together={("self_assessment", "goal")},
        ),
    ]
