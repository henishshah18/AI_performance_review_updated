import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import Modal from '../../components/common/Modal';
import {
  FlagIcon,
  ClipboardDocumentListIcon,
  UserIcon,
  ExclamationTriangleIcon,
  EyeIcon,
  PlusIcon,
  ChartBarIcon,
  ClockIcon,
  CheckCircleIcon,
  EnvelopeIcon,
  PhoneIcon,
  PencilIcon,
  TrashIcon,
  ArrowUpIcon,
  EllipsisVerticalIcon,
  CalendarIcon,
  DocumentTextIcon,
  UserGroupIcon,
  StarIcon,
  ArrowRightIcon
} from '@heroicons/react/24/outline';
// Note: Modal components are defined at the bottom of this file
// Review service and types will be imported once they're created

// Mock data types - will be replaced with real API types in later phases
interface Goal {
  id: string;
  title: string;
  description: string;
  progress: number;
  totalTasks: number;
  completedTasks: number;
  dueDate: string;
  priority: 'low' | 'medium' | 'high';
  status: 'not_started' | 'in_progress' | 'completed' | 'overdue';
  objectiveTitle: string;
}

interface TaskOverview {
  totalTasks: number;
  completedTasks: number;
  inProgressTasks: number;
  overdueTasks: number;
  upcomingDeadlines: number;
}

interface ManagerInfo {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone?: string;
  roleTitle?: string;
  department: string;
  lastContact?: string;
}

interface RecentFeedback {
  id: string;
  fromUser: string;
  type: 'positive' | 'constructive' | 'neutral';
  message: string;
  timestamp: string;
}

interface Task {
  id: string;
  title: string;
  description: string;
  goalId: string;
  goalTitle: string;
  priority: 'low' | 'medium' | 'high';
  status: 'not_started' | 'in_progress' | 'completed' | 'blocked';
  progress: number;
  dueDate: string;
  evidenceLinks: string[];
  blockerReason?: string;
  createdAt: string;
  updatedAt: string;
}

interface CreateTaskData {
  title: string;
  description: string;
  goalId: string;
  priority: 'low' | 'medium' | 'high';
  dueDate: string;
  initialProgress: number;
}

interface UpdateProgressData {
  progress: number;
  status: 'not_started' | 'in_progress' | 'completed' | 'blocked';
  updateNotes: string;
  evidenceLinks: string[];
  blockerReason?: string;
  notifyManager: boolean;
}

export function IndividualDashboard() {
  const { user } = useAuth();
  const [goals, setGoals] = useState<Goal[]>([]);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [taskOverview, setTaskOverview] = useState<TaskOverview | null>(null);
  const [managerInfo, setManagerInfo] = useState<ManagerInfo | null>(null);
  const [recentFeedback, setRecentFeedback] = useState<RecentFeedback[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [hasManager] = useState(true);

  // Review-related state
  const [activeReviewCycles, setActiveReviewCycles] = useState<ReviewCycle[]>([]);
  const [reviewDashboard, setReviewDashboard] = useState<UserReviewDashboard | null>(null);

  // Modal states
  const [showCreateTaskModal, setShowCreateTaskModal] = useState(false);
  const [showEditTaskModal, setShowEditTaskModal] = useState(false);
  const [showProgressUpdateModal, setShowProgressUpdateModal] = useState(false);
  const [showGoalDetailsModal, setShowGoalDetailsModal] = useState(false);
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [selectedGoal, setSelectedGoal] = useState<Goal | null>(null);

  // Mock data loading - will be replaced with real API calls
  useEffect(() => {
    const loadDashboardData = async () => {
      setIsLoading(true);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Mock current goals
      setGoals([
        {
          id: '1',
          title: 'Complete React Training Course',
          description: 'Finish the advanced React course and implement learnings in current project',
          progress: 75,
          totalTasks: 8,
          completedTasks: 6,
          dueDate: '2024-11-15',
          priority: 'high',
          status: 'in_progress',
          objectiveTitle: 'Team Skill Development',
        },
        {
          id: '2',
          title: 'Optimize Database Queries',
          description: 'Improve application performance by optimizing slow database queries',
          progress: 45,
          totalTasks: 5,
          completedTasks: 2,
          dueDate: '2024-12-01',
          priority: 'medium',
          status: 'in_progress',
          objectiveTitle: 'Improve Team Productivity',
        },
        {
          id: '3',
          title: 'Code Review Best Practices',
          description: 'Document and implement code review guidelines for the team',
          progress: 90,
          totalTasks: 4,
          completedTasks: 4,
          dueDate: '2024-10-30',
          priority: 'medium',
          status: 'completed',
          objectiveTitle: 'Enhance Code Quality',
        },
        {
          id: '4',
          title: 'API Documentation Update',
          description: 'Update and maintain comprehensive API documentation',
          progress: 20,
          totalTasks: 6,
          completedTasks: 1,
          dueDate: '2024-10-25',
          priority: 'low',
          status: 'overdue',
          objectiveTitle: 'Enhance Code Quality',
        },
      ]);

      // Mock tasks
      setTasks([
        {
          id: '1',
          title: 'Setup React Development Environment',
          description: 'Configure React project with TypeScript and testing setup',
          goalId: '1',
          goalTitle: 'Complete React Training Course',
          priority: 'high',
          status: 'completed',
          progress: 100,
          dueDate: '2024-10-20',
          evidenceLinks: ['https://github.com/user/react-setup'],
          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10).toISOString(),
          updatedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(),
        },
        {
          id: '2',
          title: 'Learn React Hooks',
          description: 'Complete tutorial on useState, useEffect, and custom hooks',
          goalId: '1',
          goalTitle: 'Complete React Training Course',
          priority: 'high',
          status: 'in_progress',
          progress: 80,
          dueDate: '2024-11-01',
          evidenceLinks: [],
          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 8).toISOString(),
          updatedAt: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(),
        },
        {
          id: '3',
          title: 'Identify Slow Queries',
          description: 'Use monitoring tools to identify database performance bottlenecks',
          goalId: '2',
          goalTitle: 'Optimize Database Queries',
          priority: 'medium',
          status: 'not_started',
          progress: 0,
          dueDate: '2024-11-10',
          evidenceLinks: [],
          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5).toISOString(),
          updatedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5).toISOString(),
        },
      ]);

      // Mock task overview
      setTaskOverview({
        totalTasks: 23,
        completedTasks: 13,
        inProgressTasks: 7,
        overdueTasks: 3,
        upcomingDeadlines: 5,
      });

      // Mock manager info
      setManagerInfo({
        id: '1',
        firstName: 'Sarah',
        lastName: 'Johnson',
        email: 'sarah.johnson@company.com',
        phone: '+1 (555) 123-4567',
        roleTitle: 'Engineering Manager',
        department: 'Engineering',
        lastContact: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3).toISOString(),
      });

      // Mock recent feedback
      setRecentFeedback([
        {
          id: '1',
          fromUser: 'Sarah Johnson',
          type: 'positive',
          message: 'Great work on the React component refactoring. The code is much cleaner now.',
          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(),
        },
        {
          id: '2',
          fromUser: 'Mike Chen',
          type: 'constructive',
          message: 'Consider adding more unit tests for the new features to improve coverage.',
          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5).toISOString(),
        },
      ]);

      setIsLoading(false);
    };

    loadDashboardData();
  }, []);

  // Task management functions
  const createTask = (taskData: CreateTaskData) => {
    const newTask: Task = {
      id: Date.now().toString(),
      title: taskData.title,
      description: taskData.description,
      goalId: taskData.goalId,
      goalTitle: goals.find(goal => goal.id === taskData.goalId)?.title || '',
      priority: taskData.priority,
      status: taskData.initialProgress > 0 ? 'in_progress' : 'not_started',
      progress: taskData.initialProgress,
      dueDate: taskData.dueDate,
      evidenceLinks: [],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    setTasks(prev => [...prev, newTask]);

    // Update goal's task count
    setGoals(prev => prev.map(goal =>
      goal.id === taskData.goalId
        ? { ...goal, totalTasks: goal.totalTasks + 1 }
        : goal
    ));

    setShowCreateTaskModal(false);
  };

  const updateTaskProgress = (progressData: UpdateProgressData) => {
    if (!selectedTask) return;

    const updatedTask: Task = {
      ...selectedTask,
      progress: progressData.progress,
      status: progressData.status,
      evidenceLinks: [...selectedTask.evidenceLinks, ...progressData.evidenceLinks],
      blockerReason: progressData.status === 'blocked' ? progressData.blockerReason : undefined,
      updatedAt: new Date().toISOString(),
    };

    setTasks(prev => prev.map(task =>
      task.id === selectedTask.id ? updatedTask : task
    ));

    // Update goal progress based on task completion
    const goal = goals.find(g => g.id === selectedTask.goalId);
    if (goal) {
      const goalTasks = tasks.filter(t => t.goalId === goal.id);
      const completedTasks = goalTasks.filter(t => t.status === 'completed').length + 
        (progressData.status === 'completed' ? 1 : 0);
      const totalProgress = goalTasks.reduce((sum, t) => 
        sum + (t.id === selectedTask.id ? progressData.progress : t.progress), 0) / goalTasks.length;

      setGoals(prev => prev.map(g =>
        g.id === goal.id
          ? { 
              ...g, 
              completedTasks,
              progress: Math.round(totalProgress)
            }
          : g
      ));
    }

    setShowProgressUpdateModal(false);
    setSelectedTask(null);
  };

  const deleteTask = (taskId: string) => {
    if (window.confirm('Are you sure you want to delete this task? This action cannot be undone.')) {
      const task = tasks.find(t => t.id === taskId);
      if (task) {
        setTasks(prev => prev.filter(t => t.id !== taskId));
        
        // Update goal's task count
        setGoals(prev => prev.map(goal =>
          goal.id === task.goalId
            ? { 
                ...goal, 
                totalTasks: goal.totalTasks - 1,
                completedTasks: task.status === 'completed' ? goal.completedTasks - 1 : goal.completedTasks 
              }
            : goal
        ));
      }
    }
  };

  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));

    if (diffInMinutes < 1) return 'Just now';
    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours}h ago`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    return `${diffInDays}d ago`;
  };

  const getPriorityColor = (priority: Goal['priority']) => {
    switch (priority) {
      case 'high':
        return 'bg-red-100 text-red-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-green-100 text-green-800';
    }
  };

  const getStatusColor = (status: Goal['status']) => {
    switch (status) {
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'overdue':
        return 'bg-red-100 text-red-800';
      case 'in_progress':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getProgressColor = (progress: number) => {
    if (progress >= 80) return 'bg-green-500';
    if (progress >= 60) return 'bg-yellow-500';
    return 'bg-red-500';
  };

  const getFeedbackIcon = (type: RecentFeedback['type']) => {
    switch (type) {
      case 'positive':
        return '👍';
      case 'constructive':
        return '💡';
      default:
        return '💬';
    }
  };

  if (isLoading) {
    return <DashboardSkeleton />;
  }

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <div className="md:flex md:items-center md:justify-between">
        <div className="flex-1 min-w-0">
          <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
            My Dashboard
          </h2>
          <p className="mt-1 text-sm text-gray-500">
            Welcome back, {user?.first_name}! Here's your progress overview.
          </p>
        </div>
        <div className="mt-4 flex md:mt-0 md:ml-4 space-x-3">
          <button
            onClick={() => setShowCreateTaskModal(true)}
            className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            <PlusIcon className="h-4 w-4 mr-2" />
            Add Task
          </button>
          <Link
            to="/progress"
            className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            <ChartBarIcon className="h-4 w-4 mr-2" />
            View Progress
          </Link>
        </div>
      </div>

      {/* No Manager Warning */}
      {!hasManager && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-md p-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <ExclamationTriangleIcon className="h-5 w-5 text-yellow-400" />
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-yellow-800">
                No Manager Assigned
              </h3>
              <div className="mt-2 text-sm text-yellow-700">
                <p>
                  You don't have a manager assigned yet. Some features may be limited until a manager is assigned.
                  Please contact HR for assistance.
                </p>
              </div>
              <div className="mt-4">
                <a
                  href="mailto:hr@company.com"
                  className="text-sm font-medium text-yellow-800 hover:text-yellow-700"
                >
                  Contact HR →
                </a>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Task Overview Cards */}
      {taskOverview && (
        <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-5">
          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <ClipboardDocumentListIcon className="h-6 w-6 text-gray-400" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">
                      Total Tasks
                    </dt>
                    <dd className="text-lg font-medium text-gray-900">
                      {taskOverview.totalTasks}
                    </dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <CheckCircleIcon className="h-6 w-6 text-green-500" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">
                      Completed
                    </dt>
                    <dd className="text-lg font-medium text-gray-900">
                      {taskOverview.completedTasks}
                    </dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <ClockIcon className="h-6 w-6 text-blue-500" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">
                      In Progress
                    </dt>
                    <dd className="text-lg font-medium text-gray-900">
                      {taskOverview.inProgressTasks}
                    </dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <ExclamationTriangleIcon className={`h-6 w-6 ${taskOverview.overdueTasks > 0 ? 'text-red-500' : 'text-gray-400'}`} />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">
                      Overdue
                    </dt>
                    <dd className={`text-lg font-medium ${taskOverview.overdueTasks > 0 ? 'text-red-600' : 'text-gray-900'}`}>
                      {taskOverview.overdueTasks}
                    </dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <ClockIcon className="h-6 w-6 text-yellow-500" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">
                      Due Soon
                    </dt>
                    <dd className="text-lg font-medium text-gray-900">
                      {taskOverview.upcomingDeadlines}
                    </dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Overdue Tasks Warning */}
      {taskOverview && taskOverview.overdueTasks > 0 && (
        <div className="bg-red-50 border border-red-200 rounded-md p-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <ExclamationTriangleIcon className="h-5 w-5 text-red-400" />
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">
                Overdue Tasks Require Attention
              </h3>
              <div className="mt-2 text-sm text-red-700">
                <p>
                  You have {taskOverview.overdueTasks} overdue task{taskOverview.overdueTasks > 1 ? 's' : ''}. 
                  Please review and update your progress or contact your manager if you need assistance.
                </p>
              </div>
              <div className="mt-4">
                <Link
                  to="/tasks?filter=overdue"
                  className="text-sm font-medium text-red-800 hover:text-red-700"
                >
                  View overdue tasks →
                </Link>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* My Tasks */}
      <div>
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-medium text-gray-900">My Tasks</h3>
          <button
            onClick={() => setShowCreateTaskModal(true)}
            className="text-sm text-primary-600 hover:text-primary-700 font-medium"
          >
            Create new task →
          </button>
        </div>
        
        {tasks.length === 0 ? (
          <div className="bg-white shadow rounded-lg p-6 text-center">
            <ClipboardDocumentListIcon className="mx-auto h-12 w-12 text-gray-300" />
            <h3 className="mt-2 text-sm font-medium text-gray-900">No tasks created</h3>
            <p className="mt-1 text-sm text-gray-500">
              Break down your goals into specific tasks to track your progress.
            </p>
            <button
              onClick={() => setShowCreateTaskModal(true)}
              className="mt-4 inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700"
            >
              <PlusIcon className="h-4 w-4 mr-2" />
              Create First Task
            </button>
          </div>
        ) : (
          <div className="bg-white shadow overflow-hidden sm:rounded-md">
            <ul className="divide-y divide-gray-200">
              {tasks.map((task) => (
                <li key={task.id}>
                  <div className="px-4 py-4 sm:px-6">
                    <div className="flex items-center justify-between">
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center space-x-3">
                          <h4 className="text-lg font-medium text-gray-900 truncate">
                            {task.title}
                          </h4>
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            task.priority === 'high' 
                              ? 'bg-red-100 text-red-800' 
                              : task.priority === 'medium' 
                              ? 'bg-yellow-100 text-yellow-800' 
                              : 'bg-green-100 text-green-800'
                          }`}>
                            {task.priority}
                          </span>
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            task.status === 'completed' 
                              ? 'bg-green-100 text-green-800'
                              : task.status === 'in_progress' 
                              ? 'bg-blue-100 text-blue-800'
                              : task.status === 'blocked'
                              ? 'bg-red-100 text-red-800'
                              : 'bg-gray-100 text-gray-800'
                          }`}>
                            {task.status.replace('_', ' ')}
                          </span>
                        </div>
                        <div className="mt-1">
                          <p className="text-sm text-gray-600 line-clamp-2">
                            {task.description}
                          </p>
                        </div>
                        <div className="mt-2 flex items-center text-sm text-gray-500 space-x-4">
                          <span>Goal: {task.goalTitle}</span>
                          <span>Due: {new Date(task.dueDate).toLocaleDateString()}</span>
                          <span>Evidence: {task.evidenceLinks.length} link{task.evidenceLinks.length !== 1 ? 's' : ''}</span>
                        </div>
                        <div className="mt-2">
                          <div className="flex justify-between text-sm mb-1">
                            <span className="text-gray-500">Progress</span>
                            <span className="font-medium text-gray-900">{task.progress}%</span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div
                              className={`h-2 rounded-full ${getProgressColor(task.progress)}`}
                              style={{ width: `${task.progress}%` }}
                            />
                          </div>
                        </div>
                        {task.blockerReason && (
                          <div className="mt-2 p-2 bg-red-50 border border-red-200 rounded-md">
                            <div className="flex items-start">
                              <ExclamationTriangleIcon className="h-4 w-4 text-red-400 mt-0.5 mr-2" />
                              <div>
                                <p className="text-sm font-medium text-red-800">Blocked</p>
                                <p className="text-sm text-red-700">{task.blockerReason}</p>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                      <div className="flex items-center space-x-2 ml-4">
                        <button
                          onClick={() => {
                            setSelectedTask(task);
                            setShowProgressUpdateModal(true);
                          }}
                          className="text-gray-400 hover:text-blue-500"
                          title="Update Progress"
                        >
                          <ArrowUpIcon className="h-5 w-5" />
                        </button>
                        <button
                          onClick={() => {
                            setSelectedTask(task);
                            setShowEditTaskModal(true);
                          }}
                          className="text-gray-400 hover:text-gray-500"
                          title="Edit Task"
                        >
                          <PencilIcon className="h-5 w-5" />
                        </button>
                        <button
                          onClick={() => deleteTask(task.id)}
                          className="text-gray-400 hover:text-red-500"
                          title="Delete Task"
                        >
                          <TrashIcon className="h-5 w-5" />
                        </button>
                      </div>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>

      {/* My Current Goals */}
      <div>
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-medium text-gray-900">My Current Goals</h3>
          <Link
            to="/goals"
            className="text-sm text-primary-600 hover:text-primary-700 font-medium"
          >
            View all goals →
          </Link>
        </div>
        
        {goals.length === 0 ? (
          <div className="bg-white shadow rounded-lg p-6 text-center">
            <FlagIcon className="mx-auto h-12 w-12 text-gray-300" />
            <h3 className="mt-2 text-sm font-medium text-gray-900">No goals assigned</h3>
            <p className="mt-1 text-sm text-gray-500">
              Contact your manager to get goals assigned to you.
            </p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-2">
            {goals.slice(0, 4).map((goal) => (
              <div key={goal.id} className="bg-white overflow-hidden shadow rounded-lg">
                <div className="p-5">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex space-x-2">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(goal.priority)}`}>
                        {goal.priority}
                      </span>
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(goal.status)}`}>
                        {goal.status.replace('_', ' ')}
                      </span>
                    </div>
                    <button
                      onClick={() => {
                        setSelectedGoal(goal);
                        setShowGoalDetailsModal(true);
                      }}
                      className="text-gray-400 hover:text-gray-500"
                      title="View Goal Details"
                    >
                      <EyeIcon className="h-5 w-5" />
                    </button>
                  </div>
                  
                  <div className="mb-4">
                    <h4 className="text-lg font-medium text-gray-900">{goal.title}</h4>
                    <p className="text-sm text-gray-500 mt-1">{goal.objectiveTitle}</p>
                    <p className="mt-2 text-sm text-gray-600 line-clamp-2">
                      {goal.description}
                    </p>
                  </div>
                  
                  <div className="mb-4">
                    <div className="flex justify-between text-sm mb-1">
                      <span className="text-gray-500">Progress</span>
                      <span className="font-medium text-gray-900">{goal.progress}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div
                        className={`h-2 rounded-full ${getProgressColor(goal.progress)}`}
                        style={{ width: `${goal.progress}%` }}
                      />
                    </div>
                  </div>
                  
                  <div className="flex justify-between text-sm text-gray-500">
                    <span>Tasks: {goal.completedTasks}/{goal.totalTasks}</span>
                    <span>Due: {new Date(goal.dueDate).toLocaleDateString()}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Manager Information & Recent Feedback */}
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
        {/* Manager Information */}
        {hasManager && managerInfo ? (
          <div className="bg-white shadow rounded-lg">
            <div className="px-4 py-5 sm:p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Manager Information</h3>
              
              <div className="flex items-center mb-4">
                <div className="h-12 w-12 rounded-full bg-gray-300 flex items-center justify-center">
                  <span className="text-lg font-medium text-gray-700">
                    {managerInfo.firstName.charAt(0)}{managerInfo.lastName.charAt(0)}
                  </span>
                </div>
                <div className="ml-4">
                  <h4 className="text-lg font-medium text-gray-900">
                    {managerInfo.firstName} {managerInfo.lastName}
                  </h4>
                  <p className="text-sm text-gray-500">{managerInfo.roleTitle}</p>
                  <p className="text-sm text-gray-500">{managerInfo.department} Department</p>
                </div>
              </div>
              
              <div className="space-y-3">
                <div className="flex items-center text-sm text-gray-600">
                  <EnvelopeIcon className="h-4 w-4 mr-2 text-gray-400" />
                  <a href={`mailto:${managerInfo.email}`} className="hover:text-primary-600">
                    {managerInfo.email}
                  </a>
                </div>
                
                {managerInfo.phone && (
                  <div className="flex items-center text-sm text-gray-600">
                    <PhoneIcon className="h-4 w-4 mr-2 text-gray-400" />
                    <a href={`tel:${managerInfo.phone}`} className="hover:text-primary-600">
                      {managerInfo.phone}
                    </a>
                  </div>
                )}
                
                {managerInfo.lastContact && (
                  <div className="text-sm text-gray-500">
                    Last contact: {formatTimestamp(managerInfo.lastContact)}
                  </div>
                )}
              </div>
              
              <div className="mt-6">
                <a
                  href={`mailto:${managerInfo.email}?subject=Check-in Request`}
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                >
                  <EnvelopeIcon className="h-4 w-4 mr-2" />
                  Contact Manager
                </a>
              </div>
            </div>
          </div>
        ) : (
          <NoManagerState />
        )}

        {/* Recent Feedback */}
        <div className="bg-white shadow rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">Recent Feedback</h3>
              <Link
                to="/feedback"
                className="text-sm text-primary-600 hover:text-primary-700 font-medium"
              >
                View all →
              </Link>
            </div>
            
            {recentFeedback.length === 0 ? (
              <div className="text-center py-6">
                <div className="text-4xl mb-2">💬</div>
                <h4 className="text-sm font-medium text-gray-900">No recent feedback</h4>
                <p className="text-sm text-gray-500 mt-1">
                  Feedback from your manager and peers will appear here.
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {recentFeedback.map((feedback) => (
                  <div key={feedback.id} className="border-l-4 border-primary-200 pl-4">
                    <div className="flex items-start space-x-3">
                      <span className="text-lg">{getFeedbackIcon(feedback.type)}</span>
                      <div className="flex-1">
                        <p className="text-sm text-gray-900">{feedback.message}</p>
                        <div className="mt-1 flex items-center text-xs text-gray-500">
                          <span>from {feedback.fromUser}</span>
                          <span className="mx-1">•</span>
                          <span>{formatTimestamp(feedback.timestamp)}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Create Task Modal */}
      <CreateTaskModal
        isOpen={showCreateTaskModal}
        onClose={() => setShowCreateTaskModal(false)}
        onSubmit={createTask}
        goals={goals.filter(goal => goal.status === 'in_progress' || goal.status === 'not_started')}
      />

      {/* Edit Task Modal */}
      <EditTaskModal
        isOpen={showEditTaskModal}
        onClose={() => {
          setShowEditTaskModal(false);
          setSelectedTask(null);
        }}
        onSubmit={(taskData) => {
          if (selectedTask) {
            setTasks(prev => prev.map(task =>
              task.id === selectedTask.id
                ? { ...task, ...taskData, updatedAt: new Date().toISOString() }
                : task
            ));
          }
          setShowEditTaskModal(false);
          setSelectedTask(null);
        }}
        goals={goals.filter(goal => goal.status === 'in_progress' || goal.status === 'not_started')}
        task={selectedTask}
      />

      {/* Update Progress Modal */}
      <UpdateProgressModal
        isOpen={showProgressUpdateModal}
        onClose={() => {
          setShowProgressUpdateModal(false);
          setSelectedTask(null);
        }}
        onSubmit={updateTaskProgress}
        task={selectedTask}
      />

      {/* Goal Details Modal */}
      <GoalDetailsModal
        isOpen={showGoalDetailsModal}
        onClose={() => {
          setShowGoalDetailsModal(false);
          setSelectedGoal(null);
        }}
        goal={selectedGoal}
        tasks={tasks.filter(task => selectedGoal ? task.goalId === selectedGoal.id : false)}
      />
    </div>
  );
}

// No Manager State Component
function NoManagerState() {
  return (
    <div className="bg-white shadow rounded-lg p-6 text-center">
      <UserIcon className="mx-auto h-12 w-12 text-gray-300" />
      <h3 className="mt-2 text-sm font-medium text-gray-900">No manager assigned</h3>
      <p className="mt-1 text-sm text-gray-500">
        You don't have a manager assigned yet. Contact HR to get a manager assigned.
      </p>
      <div className="mt-6">
        <a
          href="mailto:hr@company.com"
          className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          <EnvelopeIcon className="h-4 w-4 mr-2" />
          Contact HR
        </a>
      </div>
    </div>
  );
}

// Loading skeleton component
function DashboardSkeleton() {
  return (
    <div className="space-y-6 animate-pulse">
      {/* Header skeleton */}
      <div className="md:flex md:items-center md:justify-between">
        <div className="flex-1 min-w-0">
          <div className="h-8 bg-gray-200 rounded w-1/3 mb-2"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        </div>
        <div className="mt-4 flex md:mt-0 md:ml-4 space-x-3">
          <div className="h-10 bg-gray-200 rounded w-24"></div>
          <div className="h-10 bg-gray-200 rounded w-32"></div>
        </div>
      </div>

      {/* Overview cards skeleton */}
      <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-5">
        {[...Array(5)].map((_, i) => (
          <div key={i} className="bg-white overflow-hidden shadow rounded-lg p-5">
            <div className="flex items-center">
              <div className="h-6 w-6 bg-gray-200 rounded"></div>
              <div className="ml-5 w-0 flex-1">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-6 bg-gray-200 rounded w-1/2"></div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Goals skeleton */}
      <div>
        <div className="h-6 bg-gray-200 rounded w-1/4 mb-4"></div>
        <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-2">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="bg-white overflow-hidden shadow rounded-lg p-5">
              <div className="flex justify-between mb-3">
                <div className="flex space-x-2">
                  <div className="h-5 bg-gray-200 rounded w-12"></div>
                  <div className="h-5 bg-gray-200 rounded w-16"></div>
                </div>
                <div className="h-5 w-5 bg-gray-200 rounded"></div>
              </div>
              <div className="h-6 bg-gray-200 rounded w-3/4 mb-2"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
              <div className="h-4 bg-gray-200 rounded w-full mb-4"></div>
              <div className="h-2 bg-gray-200 rounded w-full mb-4"></div>
              <div className="flex justify-between">
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                <div className="h-4 bg-gray-200 rounded w-1/4"></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

// Modal Components

interface CreateTaskModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: CreateTaskData) => void;
  goals: Goal[];
}

function CreateTaskModal({ isOpen, onClose, onSubmit, goals }: CreateTaskModalProps) {
  const [formData, setFormData] = useState<CreateTaskData>({
    title: '',
    description: '',
    goalId: '',
    priority: 'medium',
    dueDate: '',
    initialProgress: 0,
  });

  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.title || !formData.goalId || !formData.dueDate) {
      return;
    }

    setIsSubmitting(true);
    await new Promise(resolve => setTimeout(resolve, 500)); // Simulate API call
    onSubmit(formData);
    setFormData({
      title: '',
      description: '',
      goalId: '',
      priority: 'medium',
      dueDate: '',
      initialProgress: 0,
    });
    setIsSubmitting(false);
    onClose();
  };

  const handleInputChange = (field: keyof CreateTaskData, value: string | number) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="Create New Task"
      size="lg"
    >
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="task-title" className="block text-sm font-medium text-gray-700">
            Task Title*
          </label>
          <input
            type="text"
            id="task-title"
            value={formData.title}
            onChange={(e) => handleInputChange('title', e.target.value)}
            className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            placeholder="Enter task title (max 100 characters)"
            maxLength={100}
            required
          />
        </div>

        <div>
          <label htmlFor="task-description" className="block text-sm font-medium text-gray-700">
            Description
          </label>
          <textarea
            id="task-description"
            value={formData.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            rows={3}
            className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            placeholder="Enter task description (max 500 characters)"
            maxLength={500}
          />
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <label htmlFor="task-goalId" className="block text-sm font-medium text-gray-700">
              Parent Goal*
            </label>
            <select
              id="task-goalId"
              value={formData.goalId}
              onChange={(e) => handleInputChange('goalId', e.target.value)}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
              required
            >
              <option value="">Select goal</option>
              {goals.map((goal) => (
                <option key={goal.id} value={goal.id}>
                  {goal.title}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label htmlFor="task-priority" className="block text-sm font-medium text-gray-700">
              Priority
            </label>
            <select
              id="task-priority"
              value={formData.priority}
              onChange={(e) => handleInputChange('priority', e.target.value as 'low' | 'medium' | 'high')}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            >
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
          </div>
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <label htmlFor="task-dueDate" className="block text-sm font-medium text-gray-700">
              Due Date*
            </label>
            <input
              type="date"
              id="task-dueDate"
              value={formData.dueDate}
              onChange={(e) => handleInputChange('dueDate', e.target.value)}
              min={new Date().toISOString().split('T')[0]}
              max={formData.goalId ? goals.find(goal => goal.id === formData.goalId)?.dueDate : ''}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
              required
            />
          </div>

          <div>
            <label htmlFor="task-initialProgress" className="block text-sm font-medium text-gray-700">
              Initial Progress (%)
            </label>
            <input
              type="number"
              id="task-initialProgress"
              value={formData.initialProgress}
              onChange={(e) => handleInputChange('initialProgress', parseInt(e.target.value) || 0)}
              min="0"
              max="100"
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            />
          </div>
        </div>

        <div className="flex justify-end space-x-3 pt-4">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting || !formData.title || !formData.goalId || !formData.dueDate}
            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? 'Creating...' : 'Create Task'}
          </button>
        </div>
      </form>
    </Modal>
  );
}

interface EditTaskModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: CreateTaskData) => void;
  goals: Goal[];
  task: Task | null;
}

function EditTaskModal({ isOpen, onClose, onSubmit, goals, task }: EditTaskModalProps) {
  const [formData, setFormData] = useState<CreateTaskData>({
    title: '',
    description: '',
    goalId: '',
    priority: 'medium',
    dueDate: '',
    initialProgress: 0,
  });

  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    if (task) {
      setFormData({
        title: task.title,
        description: task.description,
        goalId: task.goalId,
        priority: task.priority,
        dueDate: task.dueDate,
        initialProgress: task.progress,
      });
    }
  }, [task]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.title || !formData.goalId || !formData.dueDate) {
      return;
    }

    setIsSubmitting(true);
    await new Promise(resolve => setTimeout(resolve, 500)); // Simulate API call
    onSubmit(formData);
    setIsSubmitting(false);
  };

  const handleInputChange = (field: keyof CreateTaskData, value: string | number) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="Edit Task"
      size="lg"
    >
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="edit-task-title" className="block text-sm font-medium text-gray-700">
            Task Title*
          </label>
          <input
            type="text"
            id="edit-task-title"
            value={formData.title}
            onChange={(e) => handleInputChange('title', e.target.value)}
            className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            placeholder="Enter task title (max 100 characters)"
            maxLength={100}
            required
          />
        </div>

        <div>
          <label htmlFor="edit-task-description" className="block text-sm font-medium text-gray-700">
            Description
          </label>
          <textarea
            id="edit-task-description"
            value={formData.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            rows={3}
            className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            placeholder="Enter task description (max 500 characters)"
            maxLength={500}
          />
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <label htmlFor="edit-task-goalId" className="block text-sm font-medium text-gray-700">
              Parent Goal*
            </label>
            <select
              id="edit-task-goalId"
              value={formData.goalId}
              onChange={(e) => handleInputChange('goalId', e.target.value)}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
              required
            >
              <option value="">Select goal</option>
              {goals.map((goal) => (
                <option key={goal.id} value={goal.id}>
                  {goal.title}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label htmlFor="edit-task-priority" className="block text-sm font-medium text-gray-700">
              Priority
            </label>
            <select
              id="edit-task-priority"
              value={formData.priority}
              onChange={(e) => handleInputChange('priority', e.target.value as 'low' | 'medium' | 'high')}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            >
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
          </div>
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <label htmlFor="edit-task-dueDate" className="block text-sm font-medium text-gray-700">
              Due Date*
            </label>
            <input
              type="date"
              id="edit-task-dueDate"
              value={formData.dueDate}
              onChange={(e) => handleInputChange('dueDate', e.target.value)}
              min={new Date().toISOString().split('T')[0]}
              max={formData.goalId ? goals.find(goal => goal.id === formData.goalId)?.dueDate : ''}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
              required
            />
          </div>

          <div>
            <label htmlFor="edit-task-progress" className="block text-sm font-medium text-gray-700">
              Progress (%)
            </label>
            <input
              type="number"
              id="edit-task-progress"
              value={formData.initialProgress}
              onChange={(e) => handleInputChange('initialProgress', parseInt(e.target.value) || 0)}
              min="0"
              max="100"
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            />
          </div>
        </div>

        <div className="flex justify-end space-x-3 pt-4">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting || !formData.title || !formData.goalId || !formData.dueDate}
            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? 'Updating...' : 'Update Task'}
          </button>
        </div>
      </form>
    </Modal>
  );
}

interface UpdateProgressModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: UpdateProgressData) => void;
  task: Task | null;
}

function UpdateProgressModal({ isOpen, onClose, onSubmit, task }: UpdateProgressModalProps) {
  const [formData, setFormData] = useState<UpdateProgressData>({
    progress: 0,
    status: 'not_started',
    updateNotes: '',
    evidenceLinks: [],
    blockerReason: '',
    notifyManager: false,
  });

  const [evidenceLink, setEvidenceLink] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    if (task) {
      setFormData({
        progress: task.progress,
        status: task.status,
        updateNotes: '',
        evidenceLinks: [],
        blockerReason: task.blockerReason || '',
        notifyManager: false,
      });
    }
  }, [task]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    setIsSubmitting(true);
    await new Promise(resolve => setTimeout(resolve, 500)); // Simulate API call
    onSubmit(formData);
    setFormData({
      progress: 0,
      status: 'not_started',
      updateNotes: '',
      evidenceLinks: [],
      blockerReason: '',
      notifyManager: false,
    });
    setEvidenceLink('');
    setIsSubmitting(false);
  };

  const addEvidenceLink = () => {
    if (evidenceLink.trim()) {
      setFormData(prev => ({
        ...prev,
        evidenceLinks: [...prev.evidenceLinks, evidenceLink.trim()]
      }));
      setEvidenceLink('');
    }
  };

  const removeEvidenceLink = (index: number) => {
    setFormData(prev => ({
      ...prev,
      evidenceLinks: prev.evidenceLinks.filter((_, i) => i !== index)
    }));
  };

  if (!task) return null;

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={`Update Progress: ${task.title}`}
      size="lg"
    >
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <label htmlFor="progress" className="block text-sm font-medium text-gray-700">
              Progress (%)
            </label>
            <input
              type="number"
              id="progress"
              value={formData.progress}
              onChange={(e) => setFormData(prev => ({ ...prev, progress: parseInt(e.target.value) || 0 }))}
              min="0"
              max="100"
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            />
          </div>

          <div>
            <label htmlFor="status" className="block text-sm font-medium text-gray-700">
              Status
            </label>
            <select
              id="status"
              value={formData.status}
              onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value as Task['status'] }))}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            >
              <option value="not_started">Not Started</option>
              <option value="in_progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="blocked">Blocked</option>
            </select>
          </div>
        </div>

        <div>
          <label htmlFor="updateNotes" className="block text-sm font-medium text-gray-700">
            Update Notes
          </label>
          <textarea
            id="updateNotes"
            value={formData.updateNotes}
            onChange={(e) => setFormData(prev => ({ ...prev, updateNotes: e.target.value }))}
            rows={3}
            className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            placeholder="Describe what you've accomplished or any blockers..."
          />
        </div>

        {formData.status === 'blocked' && (
          <div>
            <label htmlFor="blockerReason" className="block text-sm font-medium text-gray-700">
              Blocker Reason*
            </label>
            <textarea
              id="blockerReason"
              value={formData.blockerReason}
              onChange={(e) => setFormData(prev => ({ ...prev, blockerReason: e.target.value }))}
              rows={2}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
              placeholder="Explain what's blocking your progress..."
              required
            />
          </div>
        )}

        <div>
          <label className="block text-sm font-medium text-gray-700">
            Evidence Links
          </label>
          <div className="mt-1 flex space-x-2">
            <input
              type="url"
              value={evidenceLink}
              onChange={(e) => setEvidenceLink(e.target.value)}
              className="flex-1 border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
              placeholder="Add link to work evidence (GitHub, drive, etc.)"
            />
            <button
              type="button"
              onClick={addEvidenceLink}
              className="px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              Add
            </button>
          </div>
          {formData.evidenceLinks.length > 0 && (
            <div className="mt-2 space-y-1">
              {formData.evidenceLinks.map((link, index) => (
                <div key={index} className="flex items-center justify-between bg-gray-50 px-3 py-2 rounded">
                  <a href={link} target="_blank" rel="noopener noreferrer" className="text-sm text-blue-600 hover:text-blue-800 truncate">
                    {link}
                  </a>
                  <button
                    type="button"
                    onClick={() => removeEvidenceLink(index)}
                    className="ml-2 text-red-500 hover:text-red-700"
                  >
                    ×
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>

        <div>
          <label className="flex items-center">
            <input
              type="checkbox"
              checked={formData.notifyManager}
              onChange={(e) => setFormData(prev => ({ ...prev, notifyManager: e.target.checked }))}
              className="mr-2 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <span className="text-sm text-gray-700">Notify manager about this update</span>
          </label>
        </div>

        <div className="flex justify-end space-x-3 pt-4">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting || (formData.status === 'blocked' && !formData.blockerReason)}
            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? 'Updating...' : 'Update Progress'}
          </button>
        </div>
      </form>
    </Modal>
  );
}

interface GoalDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  goal: Goal | null;
  tasks: Task[];
}

function GoalDetailsModal({ isOpen, onClose, goal, tasks }: GoalDetailsModalProps) {
  if (!goal) return null;

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="Goal Details"
      size="xl"
    >
      <div className="space-y-6">
        <div>
          <h3 className="text-lg font-medium text-gray-900">{goal.title}</h3>
          <div className="mt-2 flex items-center space-x-4">
            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
              goal.priority === 'high' 
                ? 'bg-red-100 text-red-800' 
                : goal.priority === 'medium' 
                ? 'bg-yellow-100 text-yellow-800' 
                : 'bg-green-100 text-green-800'
            }`}>
              {goal.priority} priority
            </span>
            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
              goal.status === 'completed' 
                ? 'bg-green-100 text-green-800'
                : goal.status === 'in_progress' 
                ? 'bg-blue-100 text-blue-800'
                : goal.status === 'overdue'
                ? 'bg-red-100 text-red-800'
                : 'bg-gray-100 text-gray-800'
            }`}>
              {goal.status.replace('_', ' ')}
            </span>
          </div>
        </div>

        <div>
          <h4 className="text-sm font-medium text-gray-700">Description</h4>
          <p className="mt-1 text-sm text-gray-600">
            {goal.description || 'No description provided'}
          </p>
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <h4 className="text-sm font-medium text-gray-700">Parent Objective</h4>
            <p className="mt-1 text-sm text-gray-600">{goal.objectiveTitle}</p>
          </div>

          <div>
            <h4 className="text-sm font-medium text-gray-700">Due Date</h4>
            <p className="mt-1 text-sm text-gray-600">
              {new Date(goal.dueDate).toLocaleDateString()}
            </p>
          </div>
        </div>

        <div>
          <h4 className="text-sm font-medium text-gray-700">Progress</h4>
          <div className="mt-2">
            <div className="flex justify-between text-sm mb-1">
              <span className="text-gray-500">Overall Progress</span>
              <span className="font-medium text-gray-900">{goal.progress}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <div
                className={`h-3 rounded-full ${
                  goal.progress >= 80 ? 'bg-green-500' : 
                  goal.progress >= 60 ? 'bg-yellow-500' : 'bg-red-500'
                }`}
                style={{ width: `${goal.progress}%` }}
              />
            </div>
            <div className="mt-2 flex justify-between text-sm text-gray-500">
              <span>Tasks: {goal.completedTasks}/{goal.totalTasks}</span>
              <span>
                {goal.totalTasks - goal.completedTasks} remaining
              </span>
            </div>
          </div>
        </div>

        {tasks.length > 0 && (
          <div>
            <h4 className="text-sm font-medium text-gray-700 mb-3">Related Tasks</h4>
            <div className="space-y-2">
              {tasks.map((task) => (
                <div key={task.id} className="flex items-center justify-between bg-gray-50 p-3 rounded-md">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <p className="text-sm font-medium text-gray-900">{task.title}</p>
                      <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                        task.status === 'completed' 
                          ? 'bg-green-100 text-green-800'
                          : task.status === 'in_progress' 
                          ? 'bg-blue-100 text-blue-800'
                          : task.status === 'blocked'
                          ? 'bg-red-100 text-red-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {task.status.replace('_', ' ')}
                      </span>
                    </div>
                    <div className="mt-1 flex items-center justify-between">
                      <span className="text-xs text-gray-500">
                        Due: {new Date(task.dueDate).toLocaleDateString()}
                      </span>
                      <span className="text-xs text-gray-900 font-medium">{task.progress}%</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="flex justify-end">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            Close
          </button>
        </div>
      </div>
    </Modal>
  );
}

export default IndividualDashboard; 