# Generated by Django 4.2 on 2025-06-15 20:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("ai_features", "0002_aisentimentanalysis_detected_issues"),
    ]

    operations = [
        migrations.CreateModel(
            name="AIGenerationRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "generation_type",
                    models.CharField(
                        choices=[
                            ("self_assessment", "Self Assessment"),
                            ("peer_review", "Peer Review"),
                            ("manager_review", "Manager Review"),
                            ("goal_suggestions", "Goal Suggestions"),
                        ],
                        help_text="Type of content being generated",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Current status of the generation request",
                        max_length=15,
                    ),
                ),
                (
                    "input_data",
                    models.JSONField(
                        default=dict, help_text="Input parameters used for generation"
                    ),
                ),
                (
                    "generated_content",
                    models.TextField(
                        blank=True, help_text="The AI-generated content", null=True
                    ),
                ),
                (
                    "structured_output",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Structured output data for forms",
                    ),
                ),
                (
                    "model_used",
                    models.CharField(
                        blank=True,
                        help_text="AI model used for generation (e.g., gpt-4)",
                        max_length=50,
                    ),
                ),
                (
                    "tokens_used",
                    models.IntegerField(
                        blank=True, help_text="Number of tokens consumed", null=True
                    ),
                ),
                (
                    "processing_time",
                    models.FloatField(
                        blank=True, help_text="Processing time in seconds", null=True
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if generation failed",
                        null=True,
                    ),
                ),
                (
                    "related_cycle_id",
                    models.UUIDField(
                        blank=True,
                        help_text="Related review cycle if applicable",
                        null=True,
                    ),
                ),
                (
                    "related_user_id",
                    models.UUIDField(
                        blank=True,
                        help_text="Related user being reviewed if applicable",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the generation was completed",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AISettings",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "ai_features_enabled",
                    models.BooleanField(
                        default=True, help_text="Master toggle for all AI features"
                    ),
                ),
                (
                    "sentiment_analysis_enabled",
                    models.BooleanField(
                        default=True, help_text="Enable automatic sentiment analysis"
                    ),
                ),
                (
                    "review_generation_enabled",
                    models.BooleanField(
                        default=True, help_text="Enable AI review generation"
                    ),
                ),
                (
                    "goal_suggestions_enabled",
                    models.BooleanField(
                        default=True, help_text="Enable AI goal suggestions"
                    ),
                ),
                (
                    "max_generations_per_user_per_day",
                    models.IntegerField(
                        default=10, help_text="Maximum AI generations per user per day"
                    ),
                ),
                (
                    "max_generations_per_user_per_hour",
                    models.IntegerField(
                        default=3, help_text="Maximum AI generations per user per hour"
                    ),
                ),
                (
                    "openai_model",
                    models.CharField(
                        default="gpt-4",
                        help_text="OpenAI model to use for generation",
                        max_length=50,
                    ),
                ),
                (
                    "max_tokens",
                    models.IntegerField(
                        default=1000, help_text="Maximum tokens for AI responses"
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        default=0.7,
                        help_text="Creativity temperature (0.0 to 2.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(2.0),
                        ],
                    ),
                ),
                (
                    "auto_analyze_feedback",
                    models.BooleanField(
                        default=True,
                        help_text="Automatically analyze feedback sentiment",
                    ),
                ),
                (
                    "auto_analyze_reviews",
                    models.BooleanField(
                        default=True, help_text="Automatically analyze review sentiment"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "AI Settings",
                "verbose_name_plural": "AI Settings",
            },
        ),
        migrations.AlterField(
            model_name="aisentimentanalysis",
            name="confidence_score",
            field=models.DecimalField(
                decimal_places=3,
                help_text="Confidence of the sentiment analysis from 0.0 to 1.0",
                max_digits=4,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(1.0),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="aisentimentanalysis",
            name="sentiment_label",
            field=models.CharField(
                choices=[
                    ("positive", "Positive"),
                    ("neutral", "Neutral"),
                    ("negative", "Negative"),
                ],
                help_text="Categorical sentiment label",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="aisentimentanalysis",
            name="sentiment_score",
            field=models.DecimalField(
                decimal_places=3,
                help_text="Sentiment score from -1.0 (negative) to 1.0 (positive)",
                max_digits=4,
                validators=[
                    django.core.validators.MinValueValidator(-1.0),
                    django.core.validators.MaxValueValidator(1.0),
                ],
            ),
        ),
        migrations.AddIndex(
            model_name="aisentimentanalysis",
            index=models.Index(
                fields=["sentiment_label"], name="ai_features_sentime_90ec27_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aisentimentanalysis",
            index=models.Index(
                fields=["created_at"], name="ai_features_created_9df192_idx"
            ),
        ),
        migrations.AddField(
            model_name="aisettings",
            name="updated_by",
            field=models.ForeignKey(
                help_text="User who last updated these settings",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="aigenerationrequest",
            name="user",
            field=models.ForeignKey(
                help_text="User who requested the AI generation",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ai_generation_requests",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddIndex(
            model_name="aigenerationrequest",
            index=models.Index(
                fields=["user", "generation_type"],
                name="ai_features_user_id_1b0ac4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aigenerationrequest",
            index=models.Index(
                fields=["status", "created_at"], name="ai_features_status_6f54ea_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aigenerationrequest",
            index=models.Index(
                fields=["generation_type", "created_at"],
                name="ai_features_generat_df72d1_idx",
            ),
        ),
    ]
