# Generated by Django 4.2 on 2025-06-15 16:04

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0003_alter_user_managers_auditlog_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Goal",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Clear, actionable goal title", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed goal description", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("blocked", "Blocked"),
                            ("cancelled", "Cancelled"),
                            ("overdue", "Overdue"),
                        ],
                        default="not_started",
                        help_text="Current status of the goal",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Priority level of the goal",
                        max_length=20,
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        blank=True, help_text="Goal completion deadline", null=True
                    ),
                ),
                (
                    "progress_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Auto-calculated progress based on tasks completion",
                        max_digits=5,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        help_text="Individual contributor assigned to this goal",
                        limit_choices_to={"role": "individual_contributor"},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assigned_goals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Manager who created this goal",
                        limit_choices_to={"role": "manager"},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_goals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="IndividualTask",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Specific, actionable task title", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed task description", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("blocked", "Blocked"),
                            ("cancelled", "Cancelled"),
                            ("overdue", "Overdue"),
                        ],
                        default="not_started",
                        help_text="Current status of the task",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Priority level of the task",
                        max_length=20,
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        blank=True, help_text="Task completion deadline", null=True
                    ),
                ),
                (
                    "progress_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Manual progress input by assignee",
                        max_digits=5,
                    ),
                ),
                (
                    "evidence_links",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Links to work evidence (documents, repos, etc.)",
                    ),
                ),
                (
                    "blocker_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for blocking (if status is blocked)",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        help_text="User responsible for this task",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assigned_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this task",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "goal",
                    models.ForeignKey(
                        help_text="Parent goal this task belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="okr.goal",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskUpdate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "previous_progress",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Progress percentage before this update",
                        max_digits=5,
                    ),
                ),
                (
                    "new_progress",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Progress percentage after this update",
                        max_digits=5,
                    ),
                ),
                (
                    "previous_status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("blocked", "Blocked"),
                            ("cancelled", "Cancelled"),
                            ("overdue", "Overdue"),
                        ],
                        help_text="Status before this update",
                        max_length=20,
                    ),
                ),
                (
                    "new_status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("blocked", "Blocked"),
                            ("cancelled", "Cancelled"),
                            ("overdue", "Overdue"),
                        ],
                        help_text="Status after this update",
                        max_length=20,
                    ),
                ),
                (
                    "update_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes about this progress update",
                        null=True,
                    ),
                ),
                (
                    "evidence_added",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Evidence links added in this update",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "task",
                    models.ForeignKey(
                        help_text="Task this update belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updates",
                        to="okr.individualtask",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        help_text="User who made this update",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="task_updates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Objective",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Clear, concise objective title", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed objective description",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("overdue", "Overdue"),
                        ],
                        default="draft",
                        help_text="Current status of the objective",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Priority level of the objective",
                        max_length=20,
                    ),
                ),
                (
                    "timeline_type",
                    models.CharField(
                        choices=[("quarterly", "Quarterly"), ("yearly", "Yearly")],
                        help_text="Duration type for this objective",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateField(help_text="Objective start date")),
                ("end_date", models.DateField(help_text="Objective end date")),
                (
                    "success_metrics",
                    models.TextField(
                        blank=True,
                        help_text="Key Performance Indicators and success criteria",
                        null=True,
                    ),
                ),
                (
                    "progress_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Auto-calculated progress based on goals completion",
                        max_digits=5,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="HR Admin who created this objective",
                        limit_choices_to={"role": "hr_admin"},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_objectives",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "departments",
                    models.ManyToManyField(
                        help_text="Departments involved in this objective",
                        related_name="objectives",
                        to="core.department",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Manager responsible for this objective",
                        limit_choices_to={"role": "manager"},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="owned_objectives",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="goal",
            name="objective",
            field=models.ForeignKey(
                help_text="Parent objective this goal belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="goals",
                to="okr.objective",
            ),
        ),
        migrations.AddIndex(
            model_name="taskupdate",
            index=models.Index(
                fields=["task", "-created_at"], name="okr_taskupd_task_id_1e8f6f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskupdate",
            index=models.Index(
                fields=["updated_by", "-created_at"],
                name="okr_taskupd_updated_21c80d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="objective",
            index=models.Index(
                fields=["status", "priority"], name="okr_objecti_status_449747_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="objective",
            index=models.Index(
                fields=["start_date", "end_date"], name="okr_objecti_start_d_3994ba_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="objective",
            index=models.Index(
                fields=["owner", "status"], name="okr_objecti_owner_i_df418f_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="objective",
            constraint=models.CheckConstraint(
                check=models.Q(("end_date__gt", models.F("start_date"))),
                name="objective_end_after_start",
            ),
        ),
        migrations.AddConstraint(
            model_name="objective",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("progress_percentage__gte", 0), ("progress_percentage__lte", 100)
                ),
                name="objective_progress_valid_range",
            ),
        ),
        migrations.AddIndex(
            model_name="individualtask",
            index=models.Index(
                fields=["status", "priority"], name="okr_individ_status_98005b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="individualtask",
            index=models.Index(
                fields=["assigned_to", "status"], name="okr_individ_assigne_9a386f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="individualtask",
            index=models.Index(
                fields=["goal", "status"], name="okr_individ_goal_id_40db30_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="individualtask",
            index=models.Index(
                fields=["due_date"], name="okr_individ_due_dat_dd58f0_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="individualtask",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("progress_percentage__gte", 0), ("progress_percentage__lte", 100)
                ),
                name="task_progress_valid_range",
            ),
        ),
        migrations.AddIndex(
            model_name="goal",
            index=models.Index(
                fields=["status", "priority"], name="okr_goal_status_a4dcec_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="goal",
            index=models.Index(
                fields=["assigned_to", "status"], name="okr_goal_assigne_9d5852_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="goal",
            index=models.Index(
                fields=["objective", "status"], name="okr_goal_objecti_85b626_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="goal",
            index=models.Index(fields=["due_date"], name="okr_goal_due_dat_419b07_idx"),
        ),
        migrations.AddConstraint(
            model_name="goal",
            constraint=models.UniqueConstraint(
                fields=("objective", "title"), name="unique_goal_title_per_objective"
            ),
        ),
        migrations.AddConstraint(
            model_name="goal",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("progress_percentage__gte", 0), ("progress_percentage__lte", 100)
                ),
                name="goal_progress_valid_range",
            ),
        ),
    ]
